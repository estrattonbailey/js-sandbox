require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports={
  "name": "module-init",
  "version": "0.0.1",
  "description": "",
  "main": "package.json",
  "scripts": {
    "browserify:build": "browserify src/js/main.js --debug -p [minifyify --map main.js.map --output dist/assets/main.js.map] > dist/assets/main.min.js",
    "browserify:dev": "watchify src/js/main.js -v -d -o dist/assets/main.min.js",
    "setup": "cd node_modules && ln -nsf ../src/ app"
  },
  "barrel": {
    "types": [
      "module",
      "component"
    ]
  },
  "browserify-shim": {},
  "repository": {
    "type": "git",
    "url": "git+ssh://"
  },
  "author": "estrattonbailey",
  "license": "MIT",
  "bugs": {
    "url": ""
  },
  "homepage": "",
  "devDependencies": {
    "babel-preset-es2015": "^6.9.0",
    "babel-preset-react": "^6.5.0",
    "babelify": "^7.3.0",
    "browserify": "^13.0.1",
    "exorcist": "^0.4.0",
    "watchify": "^3.7.0"
  },
  "dependencies": {}
}

},{}],2:[function(require,module,exports){
'use strict';

var config = require('../../package.json');
var initScripts = require('./lib/initScripts.js');

document.addEventListener('DOMContentLoaded', function () {
  /**
   * Find all specified elements
   * in the DOM and init their javascripts
   */
  config.barrel.types.forEach(function (type) {
    var nodes = [].slice.call(document.querySelectorAll('[data-' + type + ']'));

    for (var i = 0; i < nodes.length; i++) {
      initScripts(nodes[i], type);
    }
  });
});

},{"../../package.json":1,"./lib/initScripts.js":"lib/initScripts"}],"components/component":[function(require,module,exports){
'use strict';

function Component(el, params) {
  console.log('Component 1: ' + el + ' ' + params);
  return 'Component 1: ' + el + ' ' + params;
}

module.exports = Component;

},{}],"components/counter":[function(require,module,exports){
'use strict';

function counter() {
  console.log('Component');
}

module.exports = counter;

},{}],"lib/initScripts":[function(require,module,exports){
'use strict';

window.app = {};

/**
 * Parse data from context element attribute
 *
 * @param {object} el Context element
 * @param {string} type Classification of script
 */
function prep(el, type) {
  var raw, sequences;

  window.app[type] = {};

  raw = el.getAttribute('data-' + type);

  sequences = raw.indexOf(',') ? raw.split(/\,\s|\,/) : raw;

  sequences.forEach(function (seq) {
    var _return,
        namespace,
        args,
        context,
        snippets = [],
        params = [];

    namespace = seq.split(/\s\#/)[1] || null;

    if (namespace) {
      seq = seq.slice(0, seq.match(/\s\#/).index);
    }

    /**
     * If snippet has params,
     * we need to set them up to be
     * passed to the script
     */
    if (seq.indexOf('--') > -1) {
      args = seq.split(/\s\-\-\s/);

      snippets = args[1].split(/\s\|\s/);

      params = [].map.call(args[0].split(/\s/), function (param) {
        return param.replace(/\'/g, '');
      });
    }

    /**
     * Otherwise, we only have one snippet,
     * and we can just call it at that.
     */
    else {
        snippets.push(seq);
      }

    /**
     * Main function. Must be the LAST snippet
     * passed to the attribute
     */
    context = snippets[snippets.length - 1];

    // Remove the context snippet from the array
    snippets.splice(snippets.length - 1, 1);

    // Create object to pass to init()
    _return = {
      context: context,
      snippets: snippets,
      params: params || []
    };

    /** 
     * Run init() to fire all snippets
     * and initialize context script
     */
    init(el, _return, type);
  });
}

/**
 * Find scripts and fire them
 *
 * @param {object} el DOM node
 * @param {object} args {context: fn(), snippets: [fns()], params: []}
 * @param {string} type Classification of script
 */
function init(el, args, type) {
  var context,
      returnData,
      fns = [];

  /**
   * Set default param data
   */
  returnData = args.params;

  /**
   * Find js snippets and add to 
   * fns array to be called next
   */
  try {
    context = require(type + 's/' + args.context);
  } catch (e) {
    console.log(e.toString());
  }

  for (var s = 0; s < args.snippets.length; s++) {
    try {
      fns[s] = require('lib/' + args.snippets[s]);
    } catch (e) {
      console.log(e.toString());
    }
  }

  /**
   * Scrub data through utility functions
   */
  if (fns.length) {
    for (var i = 0; i < fns.length; i++) {
      returnData = fns[i](args.params);
      fns[i + 1] ? fns[i + 1](returnData) : null;
    }
  }

  /**
   * Fire main snippet
   */
  var instance = new context(el, returnData);

  if (args.namespace) {
    window.app[type][args.namespace] = instance;
  }

  if (typeof jQuery !== 'undefined') {
    $(el).data(type, instance);
  }
}

module.exports = prep;

},{}],"lib/util":[function(require,module,exports){
'use strict';

function Util(params) {
  params.push('added!');
  return params;
}

module.exports = Util;

},{}],"modules/module2":[function(require,module,exports){
'use strict';

function Module(el, params) {
  console.log('Module 2: ' + el + ' ' + params);
  return 'Module 2: ' + el + ' ' + params;
}

module.exports = Module;

},{}],"modules/module3":[function(require,module,exports){
'use strict';

function Module(el, params) {
  console.log('Module 3: ' + el + ' ' + params);
  return 'Module 3: ' + el + ' ' + params;
}

module.exports = Module;

},{}],"modules/module4":[function(require,module,exports){
'use strict';

function Module(el, params) {
  console.log('Module 4: ' + el + ' ' + params);
  return 'Module 4: ' + el + ' ' + params;
}

module.exports = Module;

},{}],"modules/module":[function(require,module,exports){
'use strict';

function Module(el, params) {
  console.log('Module 1: ' + el + ' ' + params);
  return 'Module 1: ' + el + ' ' + params;
}

module.exports = Module;

},{}]},{},[2])
//# sourceMappingURL=main.min.js.map
